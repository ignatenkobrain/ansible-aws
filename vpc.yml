---
- name: Set up VPCs
  hosts: vpc
  gather_facts: no
  tasks:
    - name: Create VPC
      ec2_vpc_net:
        region: "{{ aws_region }}"
        name: "{{ vpc_name }}"
        cidr_block: "{{ cidr }}"
        tags:
          Managed-By: Ansible
      register: vpc_info
      delegate_to: localhost
    - name: Cache VPC id
      set_fact: vpc_id={{ vpc_info['vpc']['id'] }} cacheable=yes

    - name: Spawn creation of an internet gateway
      ec2_vpc_igw:
        region: "{{ aws_region }}"
        vpc_id: "{{ vpc_id }}"
        tags:
          Name: "{{ vpc_name }}-igw"
          Managed-By: Ansible
      async: 30
      poll: 0
      register: igw_task
      delegate_to: localhost

    - name: Spawn creation of subnets
      ec2_vpc_subnet:
        region: "{{ aws_region }}"
        vpc_id: "{{ vpc_id }}"
        az: "{{ item.value['az'] }}"
        cidr: "{{ item.value['cidr'] }}"
        map_public: "{{ item.value.public | default(false) }}"
        wait: no
        tags:
          Name: "{{ item.key }}"
          Managed-By: Ansible
      loop: "{{ subnets | dict2items }}"
      async: 30
      poll: 0
      register: subnets_task
      delegate_to: localhost

    - name: Spawn creation of security groups
      ec2_group:
        region: "{{ aws_region }}"
        vpc_id: "{{ vpc_id }}"
        name: "{{ item.key }}"
        description: "{{ item.value['description'] }}"
        rules: "{{ item.value['rules'] | default(omit) }}"
        tags:
          Name: "{{ item.key }}"
          Managed-By: Ansible
      loop: "{{ security_groups | dict2items }}"
      async: 30
      poll: 0
      register: security_groups_task
      delegate_to: localhost

    - name: Lookup the main VPC route table (created automatically)
      ec2_vpc_route_table_info:
        region: "{{ aws_region }}"
        filters:
          vpc-id: "{{ vpc_id }}"
          association.main: "true"
      register: vpc_route_tables
      delegate_to: localhost
    - name: Cache Route Table id
      set_fact: route_table_id={{ vpc_route_tables['route_tables'][0]['id'] }} cacheable=yes

    - name: Wait until internet gateway is created
      async_status:
        jid: "{{ igw_task.ansible_job_id }}"
      register: igw_info
      until: igw_info.finished
      delegate_to: localhost
    - name: Cache Internet Gateway id
      set_fact: igw_id={{ igw_info['gateway_id'] }} cacheable=yes

    - name: Wait until subnets are created
      async_status:
        jid: "{{ item.ansible_job_id }}"
      loop: "{{ subnets_task.results }}"
      retries: 10
      register: subnets_info
      until: subnets_info.finished
      delegate_to: localhost
    - name: Cache Subnet idâ€™s
      set_fact:
        subnet_ids: >
          {{
              subnet_ids
              | default({})
              | combine({ item['subnet']['tags']['Name']: item['subnet']['id'] })
          }}
        cacheable: yes
      loop: "{{ subnets_info.results }}"

    - name: Collect public subnet IDs
      set_fact:
        public_subnet_ids: >
          {{
              public_subnet_ids | default([])
              + [ subnet_ids[item.key] ]
          }}
      loop: "{{ subnets | dict2items }}"
      when: "item.value.public | default(false)"

    - name: Add public subnets to the main routing table
      ec2_vpc_route_table:
        region: "{{ aws_region }}"
        vpc_id: "{{ vpc_id }}"
        lookup: id
        route_table_id: "{{ route_table_id }}"
        routes:
          - dest: "{{ cidr }}"
            gateway_id: local
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw_id }}"
        subnets: "{{ public_subnet_ids }}"
        tags:
          Name: "{{ vpc_name }}-rt-global"
          Managed-By: Ansible
      delegate_to: localhost

      # NAT gateway for a private subnet must be located in a public subnet
    - name: Spawn creation of NAT gateways for private subnets
      ec2_vpc_nat_gateway:
        region: "{{ aws_region }}"
        subnet_id: "{{ subnet_ids[item.value.natgw_subnet] }}"
        if_exist_do_not_create: yes  # only one per subnet ID
      loop: "{{ subnets | dict2items }}"
      when: "'natgw_subnet' in item.value"
      register: ngw_info
      delegate_to: localhost
    - name: Cache NAT Gateway id's
      set_fact:
        ngw_ids: >
          {{
              ngw_ids
              | default({})
              | combine({ item.item.key: item.nat_gateway_id })
          }}
        cacheable: yes
      loop: "{{ ngw_info.results }}"
      when: "item is not skipped"

    - name: Spawn routing tables for private subnets
      ec2_vpc_route_table:
        region: "{{ aws_region }}"
        vpc_id: "{{ vpc_id }}"
        routes:
          - dest: "{{ cidr }}"
            gateway_id: local
          - dest: 0.0.0.0/0
            gateway_id: "{{ ngw_ids[item.key] }}"
        subnets: "{{ subnet_ids[item.key] }}"
        tags:
          Name: "{{ vpc_name }}-rt-{{ item.key }}"
          Managed-By: Ansible
      delegate_to: localhost
      loop: "{{ subnets | dict2items }}"
      when: "'public' not in item.value"

    - name: Wait until security groups are created
      async_status:
        jid: "{{ item.ansible_job_id }}"
      loop: "{{ security_groups_task.results }}"
      register: security_groups
      until: security_groups.finished
      delegate_to: localhost

- name: Create group for regions containing one VPC
  hosts: vpc
  gather_facts: no
  serial: 1
  tasks:
    - name: Group by aws_region
      group_by: key=single_region_{{ aws_region }}
      when: groups['single_region_%s' | format(aws_region)] | default([]) | count == 0

- name: Upload ssh keys to AWS regions
  hosts: single_region_*
  gather_facts: no
  tasks:
    - name: Spawn uploading SSH keys
      ec2_key:
        region: "{{ aws_region }}"
        name: "{{ item.key }}"
        key_material: "{{ item.value }}"
      loop: "{{ ssh_keys | dict2items }}"
      async: 30
      poll: 0
      register: ssh_keys_task
      delegate_to: localhost

    - name: Wait until SSH keys are uploaded
      async_status:
        jid: "{{ item.ansible_job_id }}"
      loop: "{{ ssh_keys_task.results }}"
      delegate_to: localhost
